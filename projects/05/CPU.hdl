// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=tmp1);

    Not(in=instruction[15], out=notA1);
    Or(a=notA1, b=instruction[5], out=loadA);

    //A register
    ARegister(in=tmp1, load=loadA, out=outA, out[0..14]=addressM);

    Mux16(a=outA, b=inM, sel=instruction[12], out=inAlu);

    // D register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=outD);

    //ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= ) 
    ALU(x=outD ,y=inAlu ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=aluOut, out=outM ,zr=zr ,ng=ng );


    // see if need jump
    DMux8Way(in=true, sel=instruction[0..2], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);


    Not(in=ng, out=ge);
    Not(in=zr, out=nzr);
    Or(a=ng, b=zr, out=le);
    And(a=ge, b=nzr, out=pos);

    And(a=b, b=pos, out=jmp2);
    And(a=c, b=zr, out=jmp3);
    And(a=d, b=ge, out=jmp4);
    And(a=e, b=ng, out=jmp5);
    And(a=f, b=nzr, out=jmp6);
    And(a=g, b=le, out=jmp7);
    And(a=h, b=true, out=jmp8);

    Or8Way(in[0]=false, in[1]=jmp8, in[2]=jmp2, in[3]=jmp3,in[4]=jmp4,in[5]=jmp5,in[6]=jmp6,in[7]=jmp7, out=jumpp);
    And(a=instruction[15], b=jumpp, out=jump);
    Not(in=jump, out=notj);

    And(a=instruction[15], b=instruction[3], out=writeM);

    // PC(in= ,load= ,inc= ,reset= ,out= ) 
    PC(in=outA, load=jump, inc=notj, reset=reset, out[0..14]=pc);





}